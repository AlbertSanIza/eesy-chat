/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../routes/__root'
import { Route as SharedRouteRouteImport } from './../routes/shared/route'
import { Route as appRouteRouteImport } from './../routes/(app)/route'
import { Route as SharedIndexRouteImport } from './../routes/shared/index'
import { Route as appIndexRouteImport } from './../routes/(app)/index'
import { Route as SharedThreadIdRouteImport } from './../routes/shared/$threadId'
import { Route as appThreadIdRouteImport } from './../routes/(app)/$threadId'

const SharedRouteRoute = SharedRouteRouteImport.update({
  id: '/shared',
  path: '/shared',
  getParentRoute: () => rootRouteImport,
} as any)
const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const SharedIndexRoute = SharedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SharedRouteRoute,
} as any)
const appIndexRoute = appIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRouteRoute,
} as any)
const SharedThreadIdRoute = SharedThreadIdRouteImport.update({
  id: '/$threadId',
  path: '/$threadId',
  getParentRoute: () => SharedRouteRoute,
} as any)
const appThreadIdRoute = appThreadIdRouteImport.update({
  id: '/$threadId',
  path: '/$threadId',
  getParentRoute: () => appRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '/shared': typeof SharedRouteRouteWithChildren
  '/$threadId': typeof appThreadIdRoute
  '/shared/$threadId': typeof SharedThreadIdRoute
  '/shared/': typeof SharedIndexRoute
}
export interface FileRoutesByTo {
  '/$threadId': typeof appThreadIdRoute
  '/shared/$threadId': typeof SharedThreadIdRoute
  '/': typeof appIndexRoute
  '/shared': typeof SharedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appRouteRouteWithChildren
  '/shared': typeof SharedRouteRouteWithChildren
  '/(app)/$threadId': typeof appThreadIdRoute
  '/shared/$threadId': typeof SharedThreadIdRoute
  '/(app)/': typeof appIndexRoute
  '/shared/': typeof SharedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/shared' | '/$threadId' | '/shared/$threadId' | '/shared/'
  fileRoutesByTo: FileRoutesByTo
  to: '/$threadId' | '/shared/$threadId' | '/' | '/shared'
  id:
    | '__root__'
    | '/(app)'
    | '/shared'
    | '/(app)/$threadId'
    | '/shared/$threadId'
    | '/(app)/'
    | '/shared/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  SharedRouteRoute: typeof SharedRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/shared': {
      id: '/shared'
      path: '/shared'
      fullPath: '/shared'
      preLoaderRoute: typeof SharedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shared/': {
      id: '/shared/'
      path: '/'
      fullPath: '/shared/'
      preLoaderRoute: typeof SharedIndexRouteImport
      parentRoute: typeof SharedRouteRoute
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/shared/$threadId': {
      id: '/shared/$threadId'
      path: '/$threadId'
      fullPath: '/shared/$threadId'
      preLoaderRoute: typeof SharedThreadIdRouteImport
      parentRoute: typeof SharedRouteRoute
    }
    '/(app)/$threadId': {
      id: '/(app)/$threadId'
      path: '/$threadId'
      fullPath: '/$threadId'
      preLoaderRoute: typeof appThreadIdRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

interface appRouteRouteChildren {
  appThreadIdRoute: typeof appThreadIdRoute
  appIndexRoute: typeof appIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appThreadIdRoute: appThreadIdRoute,
  appIndexRoute: appIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

interface SharedRouteRouteChildren {
  SharedThreadIdRoute: typeof SharedThreadIdRoute
  SharedIndexRoute: typeof SharedIndexRoute
}

const SharedRouteRouteChildren: SharedRouteRouteChildren = {
  SharedThreadIdRoute: SharedThreadIdRoute,
  SharedIndexRoute: SharedIndexRoute,
}

const SharedRouteRouteWithChildren = SharedRouteRoute._addFileChildren(
  SharedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  SharedRouteRoute: SharedRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
